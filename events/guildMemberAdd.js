/**
 * Automatikus rang kioszt√°s √©s √ºdv√∂zl≈ë rendszer √∫j tagoknak
 * Amikor valaki csatlakozik a szerverre, automatikusan megkapja az alap√©rtelmezett rangot
 * √©s √ºdv√∂zl≈ë √ºzenetet kap
 */

const { EmbedBuilder } = require('discord.js');
const config = require('../config.json');

module.exports = {
    name: 'guildMemberAdd',
    /**
     * √öj tag csatlakoz√°sakor lefut√≥ f√ºggv√©ny
     * @param {GuildMember} member - Az √∫j tag
     */
    async execute(member) {
        try {
            console.log(`üëã √öj tag csatlakozott: ${member.user.tag} (${member.user.id})`);

            // Automatikus rang kioszt√°s
            await this.handleAutoRole(member);
            
            // √údv√∂zl≈ë √ºzenet k√ºld√©se
            await this.sendWelcomeMessage(member);

            // Logging ha enged√©lyezve van
            if (config.logging.enabled && config.logging.events.memberJoin) {
                await this.logMemberJoin(member);
            }

        } catch (error) {
            console.error('‚ùå Hiba az √∫j tag kezel√©se sor√°n:', error);
        }
    },

    /**
     * Automatikus rang kioszt√°s kezel√©se
     * @param {GuildMember} member - Az √∫j tag
     */
    async handleAutoRole(member) {
        try {
            // Ellen≈ërizz√ºk, hogy be van-e √°ll√≠tva az auto join role
            if (!config.autoJoinRole || config.autoJoinRole === 'YOUR_AUTO_JOIN_ROLE_ID_HERE') {
                console.log('‚ö†Ô∏è  Auto join role nincs be√°ll√≠tva a config.json-ban');
                return;
            }

            // Keress√ºk meg a rangot
            const role = member.guild.roles.cache.get(config.autoJoinRole);
            if (!role) {
                console.error(`‚ùå Rang nem tal√°lhat√≥: ${config.autoJoinRole}`);
                return;
            }

            // Ellen≈ërizz√ºk, hogy a bot rendelkezik-e a sz√ºks√©ges jogosults√°gokkal
            if (!member.guild.members.me.permissions.has('ManageRoles')) {
                console.error('‚ùå A botnak nincs jogosults√°ga rangok kezel√©s√©hez');
                return;
            }

            // Ellen≈ërizz√ºk, hogy a bot rangja magasabb-e mint a kiosztand√≥ rang
            if (member.guild.members.me.roles.highest.position <= role.position) {
                console.error(`‚ùå A bot rangja nem el√©g magas a(z) ${role.name} rang kioszt√°s√°hoz`);
                return;
            }

            // Rang kioszt√°sa
            await member.roles.add(role, 'Automatikus rang kioszt√°s √∫j tagnak');
            console.log(`‚úÖ ${role.name} rang kiosztva: ${member.user.tag}`);

        } catch (error) {
            console.error('‚ùå Hiba az automatikus rang kioszt√°sa sor√°n:', error);
        }
    },

    /**
     * √údv√∂zl≈ë √ºzenet k√ºld√©se
     * @param {GuildMember} member - Az √∫j tag
     */
    async sendWelcomeMessage(member) {
        try {
            // Ellen≈ërizz√ºk, hogy enged√©lyezve van-e az √ºdv√∂zl≈ë rendszer
            if (!config.welcomeSystem.enabled) {
                console.log('‚ö†Ô∏è  √údv√∂zl≈ë rendszer kikapcsolva');
                return;
            }

            // Ellen≈ërizz√ºk a csatorna konfigur√°ci√≥t
            if (!config.welcomeSystem.channelId || config.welcomeSystem.channelId === 'YOUR_WELCOME_CHANNEL_ID_HERE') {
                console.log('‚ö†Ô∏è  √údv√∂zl≈ë csatorna nincs be√°ll√≠tva a config.json-ban');
                return;
            }

            // Keress√ºk meg az √ºdv√∂zl≈ë csatorn√°t
            const welcomeChannel = member.guild.channels.cache.get(config.welcomeSystem.channelId);
            if (!welcomeChannel) {
                console.error(`‚ùå √údv√∂zl≈ë csatorna nem tal√°lhat√≥: ${config.welcomeSystem.channelId}`);
                return;
            }

            // √údv√∂zl≈ë embed l√©trehoz√°sa
            const welcomeEmbed = new EmbedBuilder()
                .setTitle(config.welcomeSystem.embed.title)
                .setDescription(config.welcomeSystem.embed.description)
                .addFields({
                    name: '\u200B',
                    value: config.welcomeSystem.embed.message.replace('{user}', `<@${member.user.id}>`),
                    inline: false
                })
                .addFields({
                    name: '\u200B',
                    value: `üìÖ **Csatlakoz√°s:** <t:${Math.floor(Date.now() / 1000)}:F>`,
                    inline: false
                })
                .setColor(config.welcomeSystem.embed.color)
                .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 256 }))
                .setImage(config.welcomeSystem.embed.image)
                .setTimestamp();

            // √údv√∂zl≈ë √ºzenet k√ºld√©se
            await welcomeChannel.send({ embeds: [welcomeEmbed] });
            console.log(`‚úÖ √údv√∂zl≈ë √ºzenet elk√ºldve: ${member.user.tag}`);

        } catch (error) {
            console.error('‚ùå Hiba az √ºdv√∂zl≈ë √ºzenet k√ºld√©se sor√°n:', error);
        }
    },

    /**
     * Tag csatlakoz√°s napl√≥z√°sa
     * @param {GuildMember} member - Az √∫j tag
     */
    async logMemberJoin(member) {
        try {
            const logChannel = member.guild.channels.cache.get(config.logging.channelId);
            if (!logChannel || config.logging.channelId === 'YOUR_LOG_CHANNEL_ID_HERE') {
                return;
            }

            const role = member.guild.roles.cache.get(config.autoJoinRole);
            
            const embed = new EmbedBuilder()
                .setTitle('üëã √öj tag csatlakozott')
                .setDescription(`${member.user.tag} csatlakozott a szerverre`)
                .addFields(
                    { name: 'üë§ Felhaszn√°l√≥', value: `<@${member.user.id}>`, inline: true },
                    { name: 'üè∑Ô∏è Kiosztott rang', value: role ? role.name : 'Nincs', inline: true },
                    { name: 'üìÖ Csatlakoz√°s ideje', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false }
                )
                .setColor('#00FF00')
                .setThumbnail(member.user.displayAvatarURL())
                .setTimestamp();

            await logChannel.send({ embeds: [embed] });

        } catch (error) {
            console.error('‚ö†Ô∏è  Hiba a log √ºzenet k√ºld√©se sor√°n:', error);
        }
    }
};
